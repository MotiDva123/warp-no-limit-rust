use clap::Parser;
use colored::*;
use std::path::{Path, PathBuf};
use std::process::Command;
use std::{env, fs, thread, time::Duration};
use sysinfo::System;
use walkdir::WalkDir;

#[derive(Parser, Debug)]
#[command(author = "Moti", version = "1.0.0", about = "Warp No Limits [BETA] - –ù–∞–¥–µ–∂–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–π–ø–∞—Å—Å", long_about = None)]
struct Args {
    /// –°–±—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
    #[arg(long)]
    reset: bool,

    /// –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    #[arg(long)]
    remove: bool,

    /// [BETA] –ù–∞–¥–µ–∂–Ω—ã–π –±–∞–π–ø–∞—Å—Å —Å –≥–ª—É–±–æ–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    #[arg(long)]
    enhanced_beta: bool,

    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    #[arg(long)]
    auto: bool,

    /// –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)
    #[arg(long)]
    silent: bool,
}

struct WarpNoLimits {
    home: PathBuf,
    operation_count: usize,
    silent: bool,
}

impl WarpNoLimits {
    fn new(silent: bool) -> Self {
        let home = dirs::home_dir().expect("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é");
        Self {
            home,
            operation_count: 0,
            silent,
        }
    }

    fn print_emoji(&self, emoji: &str, message: &str) {
        if !self.silent {
            println!("{}  {}", emoji, message);
        }
    }

    fn safe_remove(&mut self, path: &Path, description: &str) {
        if path.exists() {
            let result = if path.is_dir() {
                fs::remove_dir_all(path)
            } else {
                fs::remove_file(path)
            };

            match result {
                Ok(_) => {
                    let file_name = path.file_name().unwrap_or_default().to_string_lossy();
                    let emoji = if path.is_dir() { "üóÇÔ∏è" } else { "üìÑ" };
                    self.print_emoji(emoji, &format!("–£–¥–∞–ª–µ–Ω–æ {}: {}", description, file_name));
                    self.operation_count += 1;
                }
                Err(e) => {
                    if !self.silent {
                        self.print_emoji("‚ö†Ô∏è", &format!("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {:?}: {}", path, e));
                    }
                }
            }
        }
    }

    fn safe_remove_glob(&mut self, pattern: &str, description: &str) {
        if let Some(parent) = PathBuf::from(pattern).parent() {
            if parent.exists() {
                let pattern_name = PathBuf::from(pattern)
                    .file_name()
                    .unwrap_or_default()
                    .to_string_lossy()
                    .to_lowercase();

                for entry in WalkDir::new(parent)
                    .max_depth(1)
                    .into_iter()
                    .filter_map(|e| e.ok())
                {
                    let entry_name = entry
                        .file_name()
                        .to_string_lossy()
                        .to_lowercase();
                    
                    if pattern_name.contains("*") {
                        let check = pattern_name.replace("*", "");
                        if entry_name.contains(&check) {
                            self.safe_remove(entry.path(), description);
                        }
                    } else if entry_name == pattern_name {
                        self.safe_remove(entry.path(), description);
                    }
                }
            }
        }
    }

    fn kill_warp_processes(&self) {
        self.print_emoji("üîÑ", "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Warp...");

        #[cfg(target_os = "windows")]
        {
            let _ = Command::new("taskkill")
                .args(&["/F", "/IM", "warp.exe"])
                .output();
            let _ = Command::new("taskkill")
                .args(&["/F", "/IM", "Warp.exe"])
                .output();
        }

        #[cfg(any(target_os = "macos", target_os = "linux"))]
        {
            let _ = Command::new("pkill")
                .args(&["-f", "-i", "warp"])
                .output();
        }

        thread::sleep(Duration::from_secs(2));
        self.print_emoji("‚úÖ", "–ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }

    #[cfg(target_os = "macos")]
    fn deep_clean_macos(&mut self) {
        self.print_emoji("üßπ", "[BETA] –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ macOS...");

        let cookies = self.home.join("Library/Cookies");
        let containers = self.home.join("Library/Containers");
        let group_containers = self.home.join("Library/Group Containers");

        self.safe_remove_glob(&format!("{}/Library/Cookies/*warp*", self.home.display()), "cookies");
        self.safe_remove_glob(&format!("{}/Library/Cookies/*Warp*", self.home.display()), "cookies");
        self.safe_remove_glob(&format!("{}/Library/Containers/*warp*", self.home.display()), "containers");
        self.safe_remove_glob(&format!("{}/Library/Containers/*Warp*", self.home.display()), "containers");
        self.safe_remove_glob(&format!("{}/Library/Group Containers/*warp*", self.home.display()), "group containers");
        self.safe_remove_glob(&format!("{}/Library/Group Containers/*Warp*", self.home.display()), "group containers");
    }

    #[cfg(target_os = "linux")]
    fn deep_clean_linux(&mut self) {
        self.print_emoji("üßπ", "[BETA] –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ Linux...");

        self.safe_remove(&self.home.join(".local/lib/warp"), "lib");
        self.safe_remove(&self.home.join(".local/lib/warp-terminal"), "lib");

        let systemd_user = self.home.join(".config/systemd/user");
        if systemd_user.exists() {
            self.safe_remove_glob(&format!("{}/systemd/user/*warp*", self.home.join(".config").display()), "systemd service");
        }
    }

    #[cfg(target_os = "windows")]
    fn deep_clean_windows(&mut self) {
        self.print_emoji("üßπ", "[BETA] –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ Windows...");

        let local_low = self.home.join("AppData/LocalLow");
        if local_low.exists() {
            self.safe_remove_glob(&format!("{}/AppData/LocalLow/*warp*", self.home.display()), "LocalLow");
            self.safe_remove_glob(&format!("{}/AppData/LocalLow/*Warp*", self.home.display()), "LocalLow");
        }

        // Prefetch requires admin
        let _ = fs::read_dir("C:/Windows/Prefetch")
            .map(|entries| {
                for entry in entries.filter_map(|e| e.ok()) {
                    let name = entry.file_name().to_string_lossy().to_uppercase();
                    if name.starts_with("WARP") && name.ends_with(".PF") {
                        let _ = fs::remove_file(entry.path());
                    }
                }
            });
    }

    #[cfg(target_os = "macos")]
    fn reset_macos_identity(&mut self) {
        self.print_emoji("üçé", "–°–±—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ macOS...");

        // Application Support
        self.safe_remove_glob(&format!("{}/Library/Application Support/*warp*", self.home.display()), "–¥–∞–Ω–Ω—ã–µ");
        self.safe_remove_glob(&format!("{}/Library/Application Support/*Warp*", self.home.display()), "–¥–∞–Ω–Ω—ã–µ");

        // Preferences
        self.safe_remove_glob(&format!("{}/Library/Preferences/*warp*", self.home.display()), "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        self.safe_remove_glob(&format!("{}/Library/Preferences/*Warp*", self.home.display()), "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏");

        // Caches
        self.safe_remove_glob(&format!("{}/Library/Caches/*warp*", self.home.display()), "–∫—ç—à");
        self.safe_remove_glob(&format!("{}/Library/Caches/*Warp*", self.home.display()), "–∫—ç—à");

        // Logs
        self.safe_remove_glob(&format!("{}/Library/Logs/*warp*", self.home.display()), "–ª–æ–≥–∏");
        self.safe_remove_glob(&format!("{}/Library/Logs/*Warp*", self.home.display()), "–ª–æ–≥–∏");

        // WebKit
        self.safe_remove_glob(&format!("{}/Library/WebKit/*warp*", self.home.display()), "web-–¥–∞–Ω–Ω—ã–µ");
        self.safe_remove_glob(&format!("{}/Library/WebKit/*Warp*", self.home.display()), "web-–¥–∞–Ω–Ω—ã–µ");

        // Saved Application State
        self.safe_remove_glob(&format!("{}/Library/Saved Application State/*warp*", self.home.display()), "—Å–æ—Å—Ç–æ—è–Ω–∏–µ");
        self.safe_remove_glob(&format!("{}/Library/Saved Application State/*Warp*", self.home.display()), "—Å–æ—Å—Ç–æ—è–Ω–∏–µ");

        // HTTP Storage
        self.safe_remove_glob(&format!("{}/Library/HTTPStorages/*warp*", self.home.display()), "HTTP");
        self.safe_remove_glob(&format!("{}/Library/HTTPStorages/*Warp*", self.home.display()), "HTTP");

        // Clear Launch Services database
        let lsregister = "/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister";
        let _ = Command::new(lsregister)
            .args(&["-kill", "-r", "-domain", "local", "-domain", "system", "-domain", "user"])
            .output();
    }

    #[cfg(target_os = "linux")]
    fn reset_linux_identity(&mut self) {
        self.print_emoji("üêß", "–°–±—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ Linux...");

        let xdg_config = env::var("XDG_CONFIG_HOME")
            .map(PathBuf::from)
            .unwrap_or_else(|_| self.home.join(".config"));
        let xdg_data = env::var("XDG_DATA_HOME")
            .map(PathBuf::from)
            .unwrap_or_else(|_| self.home.join(".local/share"));
        let xdg_cache = env::var("XDG_CACHE_HOME")
            .map(PathBuf::from)
            .unwrap_or_else(|_| self.home.join(".cache"));
        let xdg_state = env::var("XDG_STATE_HOME")
            .map(PathBuf::from)
            .unwrap_or_else(|_| self.home.join(".local/state"));

        // Configuration
        self.safe_remove(&xdg_config.join("warp"), "–∫–æ–Ω—Ñ–∏–≥");
        self.safe_remove(&xdg_config.join("Warp"), "–∫–æ–Ω—Ñ–∏–≥");
        self.safe_remove(&xdg_config.join("warp-terminal"), "–∫–æ–Ω—Ñ–∏–≥");
        self.safe_remove(&xdg_config.join("warp-terminal-preview"), "–∫–æ–Ω—Ñ–∏–≥");
        self.safe_remove(&self.home.join(".warp"), "–∫–æ–Ω—Ñ–∏–≥");

        // Application data
        self.safe_remove(&xdg_data.join("warp"), "–¥–∞–Ω–Ω—ã–µ");
        self.safe_remove(&xdg_data.join("Warp"), "–¥–∞–Ω–Ω—ã–µ");
        self.safe_remove(&xdg_data.join("warp-terminal"), "–¥–∞–Ω–Ω—ã–µ");
        self.safe_remove(&xdg_data.join("warp-terminal-preview"), "–¥–∞–Ω–Ω—ã–µ");

        // Cache
        self.safe_remove(&xdg_cache.join("warp"), "–∫—ç—à");
        self.safe_remove(&xdg_cache.join("Warp"), "–∫—ç—à");
        self.safe_remove(&xdg_cache.join("warp-terminal"), "–∫—ç—à");
        self.safe_remove(&xdg_cache.join("warp-terminal-preview"), "–∫—ç—à");

        // State and logs
        self.safe_remove(&xdg_state.join("warp"), "—Å–æ—Å—Ç–æ—è–Ω–∏–µ");
        self.safe_remove(&xdg_state.join("warp-terminal"), "—Å–æ—Å—Ç–æ—è–Ω–∏–µ");
        self.safe_remove(&xdg_state.join("warp-terminal-preview"), "—Å–æ—Å—Ç–æ—è–Ω–∏–µ");

        // Temporary files
        if let Ok(user) = env::var("USER") {
            let uid = unsafe { libc::getuid() };
            self.safe_remove(&PathBuf::from(format!("/run/user/{}/warp", uid)), "runtime");
            self.safe_remove(&PathBuf::from(format!("/tmp/warp-{}", user)), "temp");
        }
    }

    #[cfg(target_os = "windows")]
    fn reset_windows_identity(&mut self) {
        self.print_emoji("ü™ü", "–°–±—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ Windows...");

        let local_appdata = env::var("LOCALAPPDATA")
            .map(PathBuf::from)
            .unwrap_or_else(|_| self.home.join("AppData/Local"));
        let appdata = env::var("APPDATA")
            .map(PathBuf::from)
            .unwrap_or_else(|_| self.home.join("AppData/Roaming"));

        // AppData Local
        self.safe_remove_glob(&format!("{}/*warp*", local_appdata.display()), "–¥–∞–Ω–Ω—ã–µ");
        self.safe_remove_glob(&format!("{}/*Warp*", local_appdata.display()), "–¥–∞–Ω–Ω—ã–µ");

        // AppData Roaming
        self.safe_remove_glob(&format!("{}/*warp*", appdata.display()), "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        self.safe_remove_glob(&format!("{}/*Warp*", appdata.display()), "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏");

        // Temp files
        let temp_dir = env::var("TEMP")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("C:/Windows/Temp"));
        self.safe_remove_glob(&format!("{}/*warp*", temp_dir.display()), "temp");
        self.safe_remove_glob(&format!("{}/*Warp*", temp_dir.display()), "temp");

        // Registry cleanup
        #[cfg(target_os = "windows")]
        self.clean_registry();
    }

    #[cfg(target_os = "windows")]
    fn clean_registry(&self) {
        use winreg::enums::*;
        use winreg::RegKey;

        let hkcu = RegKey::predef(HKEY_CURRENT_USER);
        let _ = hkcu.delete_subkey_all("Software\\Warp");

        if !self.silent {
            self.print_emoji("üîë", "–†–µ–µ—Å—Ç—Ä –æ—á–∏—â–µ–Ω");
        }
    }

    #[cfg(target_os = "macos")]
    fn remove_macos_warp(&mut self) {
        self.print_emoji("üçé", "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ macOS...");

        self.safe_remove(&PathBuf::from("/Applications/Warp.app"), "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
        self.reset_macos_identity();

        self.safe_remove_glob(&format!("{}/Downloads/*warp*", self.home.display()), "–∑–∞–≥—Ä—É–∑–∫–∏");
        self.safe_remove_glob(&format!("{}/Downloads/*Warp*", self.home.display()), "–∑–∞–≥—Ä—É–∑–∫–∏");
    }

    #[cfg(target_os = "linux")]
    fn remove_linux_warp(&mut self) {
        self.print_emoji("üêß", "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ Linux...");

        self.safe_remove(&PathBuf::from("/opt/Warp"), "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
        self.safe_remove(&PathBuf::from("/opt/warpdotdev"), "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
        self.safe_remove(&PathBuf::from("/usr/local/bin/warp"), "–±–∏–Ω–∞—Ä–Ω–∏–∫");
        self.safe_remove(&PathBuf::from("/usr/local/bin/warp-terminal"), "–±–∏–Ω–∞—Ä–Ω–∏–∫");
        self.safe_remove(&PathBuf::from("/usr/bin/warp"), "–±–∏–Ω–∞—Ä–Ω–∏–∫");
        self.safe_remove(&PathBuf::from("/usr/bin/warp-terminal"), "–±–∏–Ω–∞—Ä–Ω–∏–∫");
        self.safe_remove(&self.home.join(".local/bin/warp"), "–±–∏–Ω–∞—Ä–Ω–∏–∫");
        self.safe_remove(&self.home.join(".local/bin/warp-terminal"), "–±–∏–Ω–∞—Ä–Ω–∏–∫");

        self.reset_linux_identity();

        let xdg_data = env::var("XDG_DATA_HOME")
            .map(PathBuf::from)
            .unwrap_or_else(|_| self.home.join(".local/share"));
        self.safe_remove(&xdg_data.join("applications/warp.desktop"), "—è—Ä–ª—ã–∫");
        self.safe_remove(&xdg_data.join("applications/warp-terminal.desktop"), "—è—Ä–ª—ã–∫");
    }

    #[cfg(target_os = "windows")]
    fn remove_windows_warp(&mut self) {
        self.print_emoji("ü™ü", "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ Windows...");

        let program_files = env::var("PROGRAMFILES")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("C:/Program Files"));
        let program_files_x86 = env::var("PROGRAMFILES(X86)")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("C:/Program Files (x86)"));

        self.safe_remove(&program_files.join("Warp"), "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
        self.safe_remove(&program_files_x86.join("Warp"), "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");

        self.reset_windows_identity();

        let downloads = self.home.join("Downloads");
        self.safe_remove_glob(&format!("{}/Downloads/*warp*", self.home.display()), "–∑–∞–≥—Ä—É–∑–∫–∏");
        self.safe_remove_glob(&format!("{}/Downloads/*Warp*", self.home.display()), "–∑–∞–≥—Ä—É–∑–∫–∏");

        self.clean_registry();
    }

    fn verify_app_installed(&self) -> bool {
        #[cfg(target_os = "macos")]
        {
            PathBuf::from("/Applications/Warp.app").exists()
        }

        #[cfg(target_os = "windows")]
        {
            let program_files = env::var("PROGRAMFILES")
                .map(PathBuf::from)
                .unwrap_or_else(|_| PathBuf::from("C:/Program Files"));
            let program_files_x86 = env::var("PROGRAMFILES(X86)")
                .map(PathBuf::from)
                .unwrap_or_else(|_| PathBuf::from("C:/Program Files (x86)"));

            program_files.join("Warp").exists() || program_files_x86.join("Warp").exists()
        }

        #[cfg(target_os = "linux")]
        {
            Command::new("which")
                .arg("warp")
                .output()
                .map(|o| o.status.success())
                .unwrap_or(false)
                || Command::new("which")
                    .arg("warp-terminal")
                    .output()
                    .map(|o| o.status.success())
                    .unwrap_or(false)
                || PathBuf::from("/opt/Warp").exists()
                || PathBuf::from("/opt/warpdotdev").exists()
        }
    }

    fn enhanced_beta_bypass(&mut self) -> bool {
        println!("{}", "=".repeat(70));
        self.print_emoji("‚ö°", "[BETA] –ù–ê–î–ï–ñ–ù–´–ô –ë–ê–ô–ü–ê–°–° WARP - –†–ê–°–®–ò–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú");
        self.print_emoji("üíª", &format!("–°–∏—Å—Ç–µ–º–∞: {}", env::consts::OS));
        self.print_emoji("üéØ", "–†–µ–∂–∏–º: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥–µ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞");
        self.print_emoji("üß™", "–°—Ç–∞—Ç—É—Å: BETA - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è");
        println!("{}
", "=".repeat(70));

        // Step 1: Kill processes multiple times
        self.print_emoji("üîÑ", "–®–∞–≥ 1/4: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Warp...");
        for i in 0..3 {
            self.kill_warp_processes();
            if i < 2 {
                thread::sleep(Duration::from_secs(1));
            }
        }

        // Step 2: Standard cleanup
        self.print_emoji("üóëÔ∏è", "–®–∞–≥ 2/4: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...");
        self.reset_identity();

        // Step 3: Deep clean
        self.print_emoji("üßπ", "–®–∞–≥ 3/4: [BETA] –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...");
        self.deep_clean();

        thread::sleep(Duration::from_secs(2));

        // Step 4: Verification
        self.print_emoji("üîç", "–®–∞–≥ 4/4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
        let app_still_there = self.verify_app_installed();

        // Final report
        println!("\n{}", "=".repeat(70));
        self.print_emoji("‚úÖ", "[BETA] –ù–ê–î–ï–ñ–ù–´–ô –ë–ê–ô–ü–ê–°–° –ó–ê–í–ï–†–®–ï–ù!");
        println!("üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {}", self.operation_count);

        if app_still_there {
            self.print_emoji("üéâ", "–û—Ç–ª–∏—á–Ω–æ! Warp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω");
            self.print_emoji("üÜî", "–ú–∞—à–∏–Ω–∞ –∏–º–µ–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä");
            self.print_emoji("üîê", "[BETA] –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
            self.print_emoji("üöÄ", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Warp - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!");
        } else {
            self.print_emoji("‚ö†Ô∏è", "Warp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞");
        }

        self.print_emoji("üí°", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º [BETA]");
        println!("{}", "=".repeat(70));
        true
    }

    fn auto_bypass(&mut self) -> bool {
        println!("{}", "=".repeat(70));
        self.print_emoji("üöÄ", "–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ô–ü–ê–°–° WARP");
        self.print_emoji("üíª", &format!("–°–∏—Å—Ç–µ–º–∞: {}", env::consts::OS));
        self.print_emoji("üéØ", "–†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞");
        println!("{}
", "=".repeat(70));

        self.kill_warp_processes();
        self.reset_identity();

        let app_still_there = self.verify_app_installed();

        println!("\n{}", "=".repeat(70));
        self.print_emoji("‚úÖ", "–ë–ê–ô–ü–ê–°–° –ó–ê–í–ï–†–®–ï–ù!");
        println!("üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {}", self.operation_count);

        if app_still_there {
            self.print_emoji("üéâ", "–û—Ç–ª–∏—á–Ω–æ! Warp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
            self.print_emoji("üÜî", "–í–∞—à–∞ –º–∞—à–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä");
            self.print_emoji("üöÄ", "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Warp - –æ–Ω —É–≤–∏–¥–∏—Ç –≤–∞—Å –∫–∞–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        } else {
            self.print_emoji("‚ö†Ô∏è", "Warp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞");
        }

        println!("{}", "=".repeat(70));
        true
    }

    fn manual_reset(&mut self) -> bool {
        println!("{}", "=".repeat(70));
        self.print_emoji("üîÑ", "–°–ë–†–û–° –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†–ê –ú–ê–®–ò–ù–´");
        self.print_emoji("üíª", &format!("–°–∏—Å—Ç–µ–º–∞: {}", env::consts::OS));
        println!("{}
", "=".repeat(70));

        self.kill_warp_processes();
        self.reset_identity();

        let app_still_there = self.verify_app_installed();

        println!("\n{}", "=".repeat(70));
        self.print_emoji("‚úÖ", "–°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù!");
        println!("üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {}", self.operation_count);

        if app_still_there {
            self.print_emoji("‚úÖ", "Warp –æ—Å—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º");
        }

        println!("{}", "=".repeat(70));
        true
    }

    fn manual_remove(&mut self) -> bool {
        println!("{}", "=".repeat(70));
        self.print_emoji("üóëÔ∏è", "–ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï WARP");
        self.print_emoji("üíª", &format!("–°–∏—Å—Ç–µ–º–∞: {}", env::consts::OS));
        println!("{}
", "=".repeat(70));

        self.kill_warp_processes();
        self.remove_warp();

        println!("\n{}", "=".repeat(70));
        self.print_emoji("‚úÖ", "–£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!");
        println!("üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {}", self.operation_count);
        self.print_emoji("üîÑ", "–°–∏—Å—Ç–µ–º–∞ —É–≤–∏–¥–∏—Ç –≤–∞—Å –∫–∞–∫ –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É");
        println!("{}", "=".repeat(70));
        true
    }

    fn reset_identity(&mut self) {
        #[cfg(target_os = "macos")]
        self.reset_macos_identity();

        #[cfg(target_os = "windows")]
        self.reset_windows_identity();

        #[cfg(target_os = "linux")]
        self.reset_linux_identity();
    }

    fn deep_clean(&mut self) {
        #[cfg(target_os = "macos")]
        self.deep_clean_macos();

        #[cfg(target_os = "windows")]
        self.deep_clean_windows();

        #[cfg(target_os = "linux")]
        self.deep_clean_linux();
    }

    fn remove_warp(&mut self) {
        #[cfg(target_os = "macos")]
        self.remove_macos_warp();

        #[cfg(target_os = "windows")]
        self.remove_windows_warp();

        #[cfg(target_os = "linux")]
        self.remove_linux_warp();
    }
}

fn show_banner() {
    println!("\n{}", "=".repeat(50));
    println!(
        r#"    
‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù 
‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     
 ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     

‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"#
    );
    println!("{}", "=".repeat(50));
    println!("‚ïë{}üöÄ AUTOMATIC BYPASS TOOL [BETA] üöÄ{}‚ïë", " ".repeat(5), " ".repeat(5));
    println!("‚ïë üë®‚Äçüíª Created by Moti ¬© 2025                   ‚ïë");
    println!("‚ïë üîó github.com/MotiDva123/warp-no-limit-rust  ‚ïë");
    println!("‚ïë ‚ö° Enhanced Beta Mode Available               ‚ïë");
    println!("{}\n", "=".repeat(50));
}

fn main() {
    let args = Args::parse();

    if !args.silent {
        show_banner();
    }

    let mut tool = WarpNoLimits::new(args.silent);

    let success = if args.remove {
        tool.manual_remove()
    } else if args.reset {
        tool.manual_reset()
    } else if args.enhanced_beta {
        tool.enhanced_beta_bypass()
    } else if args.auto {
        tool.auto_bypass()
    } else {
        // Default: enhanced beta bypass
        tool.enhanced_beta_bypass()
    };

    if success {
        if !args.silent {
            println!("\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        }
        std::process::exit(0);
    } else {
        if !args.silent {
            println!("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏");
        }
        std::process::exit(1);
    }
}
